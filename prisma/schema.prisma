// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coin {
  id                Int      @id @default(autoincrement())
  coinGeckoId       String   @unique
  name              String
  ticker            String   @unique
  price             Float?
  percentChange     Float?
  lastUpdated       DateTime @default(now())
  whitePaper        String?
  riskLevel         Float?
  whitePaperUrl     String?
  // relationships - metric
  metrics           Metric?  @relation(fields: [metricId], references: [id])
  image             String?
  marketCap         Float?
  totalVolume       Float?
  circulatingSupply Float?
  totalSupply       Float?
  noWhitePaper      Boolean?
  metricId          Int?
}

// metric model holds booleans on whether or not a coin contains certain metrics in the whitepaper, ie regulation, public team, tokenomics, etc
model Metric {
  id          Int      @id @default(autoincrement())
  regulation  Boolean
  publicTeam  Boolean
  whitePaper  Boolean
  lastUpdated DateTime @default(now())
  // relationships
  coin        Coin[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
